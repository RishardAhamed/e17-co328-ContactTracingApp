# -*- coding: utf-8 -*-
"""Final Covid Predictions(Future Forecast) - USdataset

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eitSxjYtdo486uuikGx5o9nFwNDAbnfo
"""

# Commented out IPython magic to ensure Python compatibility.
#importing libraries
import pandas as pd 
import matplotlib.pyplot as plt
import numpy as np
# %matplotlib inline
from statsmodels.tsa.api import ExponentialSmoothing, SimpleExpSmoothing, Holt

confirmed_cases = pd.read_csv('US_confirmed.csv')
deaths_reported = pd.read_csv('US_deaths.csv')
recovered_cases = pd.read_csv('US_recovered.csv')

cols = confirmed_cases.keys()

confirmed = confirmed_cases.loc[:, cols[4]:cols[-1]]
deaths = deaths_reported.loc[:, cols[4]:cols[-1]]
recoveries = recovered_cases.loc[:, cols[4]:cols[-1]]

columns=confirmed.keys()

dates=pd.to_datetime(columns)

rowsnew=confirmed.values.tolist()
rowsdeaths=deaths.values.tolist()
rowsrecoveries=recoveries.values.tolist()

CovidConfirmedData = pd.Series(rowsnew[0], dates)
CovidDeathsData = pd.Series(rowsdeaths[0], dates)
CovidRecoveredData = pd.Series(rowsrecoveries[0], dates)

CovidConfirmedData

CovidDeathsData

CovidRecoveredData

"""### Holtâ€™s Method"""

from statsmodels.tsa.seasonal import seasonal_decompose
results=seasonal_decompose(CovidConfirmedData)
results.plot();

from statsmodels.tsa.seasonal import seasonal_decompose
results2=seasonal_decompose(CovidDeathsData)
results2.plot();

from statsmodels.tsa.seasonal import seasonal_decompose
results3=seasonal_decompose(CovidRecoveredData)
results3.plot();

#plotting the data set for confirmed cases
plt.figure(figsize=[15,10])
plt.grid(True)
plt.plot(CovidConfirmedData,label='Confirmed',color="red")
plt.legend(loc=2)

#plotting the data set for deaths
plt.figure(figsize=[15,10])
plt.grid(True)
plt.plot(CovidDeathsData,label='deaths',color="blue")
plt.legend(loc=2)

#plotting the data set for Recovered cases
plt.figure(figsize=[15,10])
plt.grid(True)
plt.plot(CovidRecoveredData,label='Recovered',color="green")
plt.legend(loc=2)

"""#### Holt's Method Linear trend for confirmed cases"""

#splitting into train and test data sets for confirmed cases
columns=confirmed.keys()

train=confirmed_cases.loc[:, cols[70]:cols[130]]
test=confirmed_cases.loc[:, cols[130]:cols[154]]

rowstrain=train.values.tolist()
rowstest=test.values.tolist()

trainkeys = train.keys()
testkeys = test.keys()

traindates=pd.to_datetime(trainkeys)
testdates=pd.to_datetime(testkeys)

traindataseries =pd.Series(rowstrain[0], traindates)
testdataseries = pd.Series(rowstest[0], testdates)

fit1 = Holt(traindataseries).fit(smoothing_level=0.8, smoothing_slope=0.2, optimized=False)

fit2 = Holt(traindataseries).fit(smoothing_level=0.8, smoothing_slope=0.1, optimized=False)

fit3 = Holt(traindataseries).fit(smoothing_level=0.8, smoothing_slope=0.8, optimized=True)

pred1=fit1.forecast(25)
pred2=fit2.forecast(25)
pred3=fit3.forecast(25)

#mean Square error for predictions
sse1 = np.sqrt(np.mean(np.square(rowstest[0] - pred1.values)))
sse2 = np.sqrt(np.mean(np.square(rowstest[0] - pred2.values)))
sse3 = np.sqrt(np.mean(np.square(rowstest[0] - pred3.values)))

sse1

sse2

sse3

#plotting the predictions plots with test data set to compare

fig, ax = plt.subplots(figsize=(12, 6))
ax.plot(testdates, rowstest[0], label="test",color="c")
ax.plot(testdates, pred1, label=" prediction 1-alpha="+str(fit1.params['smoothing_level'])[:4]+", beta="+str(fit1.params['smoothing_slope'])[:4], color="red")
ax.plot(testdates, pred2, label="prediction 2-alpha="+str(fit2.params['smoothing_level'])[:4]+", beta="+str(fit2.params['smoothing_slope'])[:4], color="green")
ax.plot(testdates, pred3, label="prediction 3-alpha="+str(fit3.params['smoothing_level'])[:4]+", beta="+str(fit3.params['smoothing_slope'])[:4], color="blue")
#ax.plot(traindates,rowstrain[0],label="train",color="grey")
#ax.plot(traindates, fit1.fittedvalues, color=c)
#ax.plot(testdates,rowstest[0], color="gray")
#ax.plot(testdates, pred1.values, linestyle='--', color='blue', label="pred1");
#ax.plot(testdates, pred2.values, linestyle='--', color='green', label="pred2");
#ax.plot(testdates, pred3.values, linestyle='--', color='red', label="pred3");
'''for p, f, c in zip((pred1,pred2,pred3),(fit1, fit2, fit3),('red','green','blue')):
    #ax.plot(traindates, f.fittedvalues, color=c)
    ax.plot(testdates, rowstest[0], color=c)
    ax.plot(testdates, p, label="alpha="+str(f.params['smoothing_level'])[:4]+", beta="+str(f.params['smoothing_slope'])[:4], color=c)'''
plt.title("Holt's Exponential Smoothing linear trend confirmed cases")
plt.legend();

fit1.fittedvalues

fcast1 = fit1.forecast(5).rename("Holt's linear trend")
fcast1

"""#### Holt's Method Exponential trend for confirmed cases"""

fit4 = Holt(traindataseries, exponential=True).fit(smoothing_level=0.8, smoothing_slope=0.6, optimized=False)
fit5 = Holt(traindataseries,exponential=True).fit(smoothing_level=0.8, smoothing_slope=0.2, optimized=False)

fit6 = Holt(traindataseries,exponential=True).fit(smoothing_level=0.8, smoothing_slope=0.1, optimized=True)

pred1=fit4.forecast(25)
pred2=fit5.forecast(25)
pred3=fit6.forecast(25)

#mean square Error for predictions from exponential trend in Holt's Method
sse1 = np.sqrt(np.mean(np.square(rowstest[0] - pred1.values)))
sse2 = np.sqrt(np.mean(np.square(rowstest[0] - pred2.values)))
sse3 = np.sqrt(np.mean(np.square(rowstest[0] - pred3.values)))

sse1

sse2

sse3

fig, ax = plt.subplots(figsize=(12, 6))

ax.plot(traindates, rowstrain[0], label="test",color="grey")
ax.plot(testdates, rowstest[0], label="test",color="c")
ax.plot(testdates, pred1, label="alpha="+str(fit4.params['smoothing_level'])[:4]+", beta="+str(fit4.params['smoothing_slope'])[:4], color="red")
ax.plot(testdates, pred2, label="alpha="+str(fit5.params['smoothing_level'])[:4]+", beta="+str(fit5.params['smoothing_slope'])[:4], color="green")
ax.plot(testdates, pred3, label="alpha="+str(fit6.params['smoothing_level'])[:4]+", beta="+str(fit6.params['smoothing_slope'])[:4], color="blue")
plt.title("Holt's Exponential Smoothing exponential trend confirmed cases")
plt.legend();

fit2.fittedvalues

fcast2 = fit2.forecast(5).rename("Exponential trend")
fcast2

"""#### Holt's Method Linear trend for Deaths"""

#splitting into train and test data sets for confirmed cases
columns=confirmed.keys()

train=deaths_reported.loc[:, cols[76]:cols[136]]
test=deaths_reported.loc[:, cols[136]:cols[160]]

rowstrain=train.values.tolist()
rowstest=test.values.tolist()

trainkeys = train.keys()
testkeys = test.keys()

traindates=pd.to_datetime(trainkeys)
testdates=pd.to_datetime(testkeys)

traindataseries =pd.Series(rowstrain[0], traindates)
testdataseries = pd.Series(rowstest[0], testdates)

train

fit1 = Holt(traindataseries).fit(smoothing_level=0.8, smoothing_slope=0.2, optimized=False)

fit2 = Holt(traindataseries).fit(smoothing_level=0.7, smoothing_slope=0.8, optimized=False)

fit3 = Holt(traindataseries).fit(smoothing_level=0.5, smoothing_slope=0.9, optimized=True)

pred1=fit1.forecast(25)
pred2=fit2.forecast(25)
pred3=fit3.forecast(25)

#mean Square error for predictions
sse1 = np.sqrt(np.mean(np.square(rowstest[0] - pred1.values)))
sse2 = np.sqrt(np.mean(np.square(rowstest[0] - pred2.values)))
sse3 = np.sqrt(np.mean(np.square(rowstest[0] - pred3.values)))

sse1

sse2

sse3

#plotting the predictions plots with test data set to compare

fig, ax = plt.subplots(figsize=(12, 6))
ax.plot(testdates, rowstest[0], label="test",color="c")
ax.plot(testdates, pred1, label=" prediction 1-alpha="+str(fit1.params['smoothing_level'])[:4]+", beta="+str(fit1.params['smoothing_slope'])[:4], color="red")
ax.plot(testdates, pred2, label="prediction 2-alpha="+str(fit2.params['smoothing_level'])[:4]+", beta="+str(fit2.params['smoothing_slope'])[:4], color="green")
ax.plot(testdates, pred3, label="prediction 3-alpha="+str(fit3.params['smoothing_level'])[:4]+", beta="+str(fit3.params['smoothing_slope'])[:4], color="blue")
#ax.plot(traindates,rowstrain[0],label="train",color="grey")


plt.title("Holt's Exponential Smoothing linear trend for deaths")
plt.legend();

fit1.fittedvalues

fcast1 = fit1.forecast(5).rename("Holt's linear trend")
fcast1

"""#### Holt's Method Exponential trend for Deaths"""

fit4 = Holt(traindataseries).fit(smoothing_level=0.8, smoothing_slope=0.2, optimized=False)

fit5 = Holt(traindataseries).fit(smoothing_level=0.7, smoothing_slope=0.8, optimized=False)

fit6 = Holt(traindataseries).fit(smoothing_level=0.5, smoothing_slope=0.9, optimized=True)

pred1=fit4.forecast(25)
pred2=fit5.forecast(25)
pred3=fit6.forecast(25)

#mean square Error for predictions from exponential trend in Holt's Method
sse1 = np.sqrt(np.mean(np.square(rowstest[0] - pred1.values)))
sse2 = np.sqrt(np.mean(np.square(rowstest[0] - pred2.values)))
sse3 = np.sqrt(np.mean(np.square(rowstest[0] - pred3.values)))

sse1

sse2

sse3

fig, ax = plt.subplots(figsize=(12, 6))

#ax.plot(traindates, rowstrain[0], label="test",color="grey")
ax.plot(testdates, rowstest[0], label="test",color="c")
ax.plot(testdates, pred1, label="alpha="+str(fit4.params['smoothing_level'])[:4]+", beta="+str(fit4.params['smoothing_slope'])[:4], color="red")
ax.plot(testdates, pred2, label="alpha="+str(fit5.params['smoothing_level'])[:4]+", beta="+str(fit5.params['smoothing_slope'])[:4], color="green")
ax.plot(testdates, pred3, label="alpha="+str(fit6.params['smoothing_level'])[:4]+", beta="+str(fit6.params['smoothing_slope'])[:4], color="blue")
plt.title("Holt's Exponential Smoothing exponential trend for deaths ")
plt.legend();

fit2.fittedvalues

fcast2 = fit2.forecast(5).rename("Exponential trend")
fcast2

"""#### Holt's Method Linear trend for Recovered cases"""

#splitting into train and test data sets for confirmed cases
columns=confirmed.keys()

train=recovered_cases.loc[:, cols[70]:cols[130]]
test=recovered_cases.loc[:, cols[130]:cols[154]]

rowstrain=train.values.tolist()
rowstest=test.values.tolist()

trainkeys = train.keys()
testkeys = test.keys()

traindates=pd.to_datetime(trainkeys)
testdates=pd.to_datetime(testkeys)

traindataseries =pd.Series(rowstrain[0], traindates)
testdataseries = pd.Series(rowstest[0], testdates)

fit1 = Holt(traindataseries).fit(smoothing_level=0.8, smoothing_slope=0.2, optimized=False)

fit2 = Holt(traindataseries).fit(smoothing_level=0.8, smoothing_slope=0.1, optimized=False)

fit3 = Holt(traindataseries).fit(smoothing_level=0.8, smoothing_slope=0.8, optimized=True)

pred1=fit1.forecast(25)
pred2=fit2.forecast(25)
pred3=fit3.forecast(25)

#mean Square error for predictions
sse1 = np.sqrt(np.mean(np.square(rowstest[0] - pred1.values)))
sse2 = np.sqrt(np.mean(np.square(rowstest[0] - pred2.values)))
sse3 = np.sqrt(np.mean(np.square(rowstest[0] - pred3.values)))

sse1

sse2

sse3

#plotting the predictions plots with test data set to compare

fig, ax = plt.subplots(figsize=(12, 6))
ax.plot(testdates, rowstest[0], label="test",color="c")
ax.plot(testdates, pred1, label=" prediction 1-alpha="+str(fit1.params['smoothing_level'])[:4]+", beta="+str(fit1.params['smoothing_slope'])[:4], color="red")
ax.plot(testdates, pred2, label="prediction 2-alpha="+str(fit2.params['smoothing_level'])[:4]+", beta="+str(fit2.params['smoothing_slope'])[:4], color="green")
ax.plot(testdates, pred3, label="prediction 3-alpha="+str(fit3.params['smoothing_level'])[:4]+", beta="+str(fit3.params['smoothing_slope'])[:4], color="blue")
#ax.plot(traindates,rowstrain[0],label="train",color="grey")
plt.title("Holt's Exponential Smoothing linear trend for Recovered cases")
plt.legend();

fit1.fittedvalues

fcast1 = fit1.forecast(5).rename("Holt's linear trend")
fcast1

"""#### Holt's Method Exponential trend for recovered cases"""

fit4 = Holt(traindataseries, exponential=True).fit(smoothing_level=0.8, smoothing_slope=0.5, optimized=False)
fit5 = Holt(traindataseries,exponential=True).fit(smoothing_level=0.8, smoothing_slope=0.3, optimized=False)

fit6 = Holt(traindataseries,exponential=True).fit(smoothing_level=0.8, smoothing_slope=0.4, optimized=True)

pred1=fit4.forecast(25)
pred2=fit5.forecast(25)
pred3=fit6.forecast(25)

#mean square Error for predictions from exponential trend in Holt's Method
sse1 = np.sqrt(np.mean(np.square(rowstest[0] - pred1.values)))
sse2 = np.sqrt(np.mean(np.square(rowstest[0] - pred2.values)))
sse3 = np.sqrt(np.mean(np.square(rowstest[0] - pred3.values)))

sse1

sse2

sse3

fig, ax = plt.subplots(figsize=(12, 6))

#ax.plot(traindates, rowstrain[0], label="test",color="grey")
ax.plot(testdates, rowstest[0], label="test",color="c")
ax.plot(testdates, pred1, label="alpha="+str(fit4.params['smoothing_level'])[:4]+", beta="+str(fit4.params['smoothing_slope'])[:4], color="red")
ax.plot(testdates, pred2, label="alpha="+str(fit5.params['smoothing_level'])[:4]+", beta="+str(fit5.params['smoothing_slope'])[:4], color="green")
ax.plot(testdates, pred3, label="alpha="+str(fit6.params['smoothing_level'])[:4]+", beta="+str(fit6.params['smoothing_slope'])[:4], color="blue")
plt.title("Holt's Exponential Smoothing exponential trend for Recovered cases")
plt.legend();

fit2.fittedvalues

fcast2 = fit2.forecast(5).rename("Exponential trend")
fcast2